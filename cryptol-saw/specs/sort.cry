// mceliece348864

module int32_sort where

import helper

int32_BOTTOM = 0x80000000

property int32_BOTTOM_min a = smin int32_BOTTOM a == int32_BOTTOM


int32_sorted : {n} (fin n) => [n][32] -> Bool
int32_sorted xs = all (\(x, y) -> x <=$ y) (zip xs' xs)
  where xs' = update (xs>>1) 0 int32_BOTTOM

smin : {a} (SignedCmp a) => a -> a -> a
smin x y = if x <$ y then x else y

smax : {a} (SignedCmp a) => a -> a -> a
smax x y = if x >$ y then x else y

int32_MINMAX : ([32], [32]) -> ([32], [32])
int32_MINMAX (a, b) = (smin a b, smax a b)

int32_MINMAX' : ([32], [32]) -> ([32], [32])
int32_MINMAX' (a, b) = (a ^ c_4, b ^ c_4)
  where ab  = b ^ a
        c_1 = b - a
        c_2 = c_1 ^ (ab && (c_1 ^ b))
        c_3 = c_2 >>$ 31
        c_4 = c_3 && ab


uint64_MINMAX : ([64], [64]) -> ([64], [64])
uint64_MINMAX (a, b) = (min a b, max a b)

uint64_MINMAX' : ([64], [64]) -> ([64], [64])
uint64_MINMAX' (a, b) = (a ^ c_4, b ^ c_4)
  where c_1 = b - a
        c_2 = c_1 >> 63
        c_3 = -c_2
        c_4 = c_3 && (a ^ b)

property int32_minmax_equal (a, b) = int32_MINMAX (a, b) == int32_MINMAX' (a, b)

property uint64_minmax_symm (a, b) = uint64_MINMAX (a, b) == uint64_MINMAX (b, a)
property uint64_minmax'_symm (a, b) = uint64_MINMAX' (a, b) == uint64_MINMAX' (b, a)
property uint64_minmax'_symm_iff (a, b) = uint64_MINMAX' (a, b) == uint64_MINMAX' (b, a) <==> max a b - min a b != 2^^63

property uint64_minmax_equal (a, b) = uint64_MINMAX (a, b) == uint64_MINMAX' (a, b)

property uint64_minmax_equal_if (a, b) = (max a b - min a b < 2^^63) ==> uint64_minmax_equal (a, b)

property uint64_minmax_equal_only_if (a, b) = uint64_minmax_equal (a, b) ==> (max a b - min a b < 2^^63)

property uint64_minmax_equal_iff (a, b) = uint64_minmax_equal (a, b) <==> (max a b - min a b < 2^^63) || ((b < a) && (a - b == 2^^63))

int32_MINMAX_swap : {n, a} (Integral a) => (a, a) -> [n][32] -> [n][32]
int32_MINMAX_swap (i, j) xs = updates xs [i, j] [final_xi, final_xj]
  where (final_xi, final_xj) = int32_MINMAX (xs @ i, xs @ j)

int32_sort : {m} (fin m) => [m][32] -> [m][32]
int32_sort xs_init = last xss
  where xss = [xs_init] # [ if (s.0 >= s.1) \/ (s.0 >= `m) \/ (s.1 >= `m) then xs else int32_MINMAX_swap s xs | xs <- xss | s <- syndrome]
        syndrome = join <~ sort_syndrome`{lg2 m}

uint64_MINMAX_swap : {n, a} (Integral a) => (a, a) -> [n][64] -> [n][64]
uint64_MINMAX_swap (i, j) xs = updates xs [i, j] [final_xi, final_xj]
  where (final_xi, final_xj) = uint64_MINMAX (xs @ i, xs @ j)

uint64_sort : {m} (fin m) => [m][64] -> [m][64]
uint64_sort xs_init = last xss
  where xss = [xs_init] # [ if (s.0 >= s.1) \/ (s.0 >= `m) \/ (s.1 >= `m) then xs else uint64_MINMAX_swap s xs | xs <- xss | s <- syndrome]
        syndrome = join <~ sort_syndrome`{lg2 m}

sort_syndrome : {d} (fin d) => [d*d][2^^d](Integer, Integer)
sort_syndrome = [[(n, partner n l p) | n <- [0 .. 2^^d - 1]] | l <- take`{d} [1 ... ], p <- take`{d} [1 ... ]]
  where partner n l p = if p > l then n else
                        if p == 1 then toInteger ((fromInteger n) ^ (1 << (l - 1)) : [d + 1])
                        else  if (sn == 0) || (sn == box - 1) then n
                              else if (sn % 2 == 0) then n - scale else n + scale
                          where (scale, box) = (2^^(l - p), 2^^p)
                                sn = n / scale - (n / scale / box) * box

type constraint lgm m = (fin m, 1 + lg2 m >= width m)

p_vals : {m} (fin m) => [lg2 m]Integer
p_vals = reverse <~ take`{lg2 m} [2^^i | i <- [0 ... ]]


int32_sort' : {m} (fin m) => [m][32] -> [m][32]
int32_sort' xs_init = last xss
  where xss = [xs_init] #
              [ loop_p p xs 
              | xs <- xss
              | p <- p_vals`{m}
              ]


loop_p : {m} (fin m) => Integer -> [m][32] -> [m][32]
loop_p p xs_init = (last xsps_2).0
  where xss_1 =  [xs_init] #
                  [ loop_i_1 p i xs
                  | xs <- xss_1
                  | i <- [0 ...]
                  ]
        xs_postp = (xss_1 @ (`m - p))
        xsps_2 =  [(xs_postp, 0)] #
                  [ loop_q p q xsp
                  | xsp <- xsps_2
                  | q <- p_vals`{m}
                  ]


loop_i_1 : {m} (fin m) => Integer -> Integer -> [m][32] -> [m][32]
loop_i_1 p i xs =  if ((fromInteger i) && (fromInteger p)) == (zero : [64])
                      then int32_MINMAX_swap (i, i + p) xs
                      else xs


loop_q : {m} (fin m) => Integer -> Integer -> ([m][32], Integer) -> ([m][32], Integer)
loop_q p q (xs_init, i) =  if q <= p
                      then (xs_init, i)
                      else (xsps @ (`m - q - i))
                      where xsps =  [(xs_init, i)] #
                                    [ loop_i_2`{m} p q xsp
                                    | xsp <- xsps
                                    ]


loop_i_2 : {m} (fin m) => Integer -> Integer -> ([m][32], Integer) -> ([m][32], Integer)
loop_i_2 p q (xs_init, i) = if ((fromInteger i) && (fromInteger p)) == (zero : [64])
                            then (last xss, i + 1)
                            else (xs_init, i + 1)
                            where xss = [xs_init] # 
                                        [ loop_r p q r i xs
                                        | xs <- xss
                                        | r <- p_vals`{m}
                                        ]

loop_r : {m} (fin m) => Integer -> Integer -> Integer -> Integer -> [m][32] -> [m][32]
loop_r p q r i xs =  if (r > q)
          then xs
          else  if (r <= p) 
                then xs
                else int32_MINMAX_swap (i + p, i + r) xs

sort_eq_sort' : {n} (fin n, 2 ^^ lg2 n >= n) => [n][32] -> Bit
sort_eq_sort' xs = int32_sort xs == int32_sort' xs

int32_sort_n_sorted : {n} (fin n, 2 ^^ lg2 n >= n) => [n][32] -> Bool
property int32_sort_n_sorted xs = int32_sorted (int32_sort xs)

int32_sort'_m_sorted : {m} (fin m) => [m][32] -> Bool
property int32_sort'_m_sorted xs = int32_sorted (int32_sort' xs)


/*

static void int32_sort(int32_t *x,long long n)
{
  long long top,p,q,r,i;

  if (n < 2) return;
  top = 1;
  while (top < n - top) top += top;

  for (p = top;p > 0;p >>= 1) {
    for (i = 0;i < n - p;++i)
      if (!(i & p))
        int32_MINMAX(x[i],x[i+p]);
    i = 0;
    for (q = top;q > p;q >>= 1) {
      for (;i < n - q;++i) {
        if (!(i & p)) {
          int32_t a = x[i + p];
          for (r = q;r > p;r >>= 1)
            int32_MINMAX(a,x[i+r]);
          x[i + p] = a;
        }
      }
    }
  }
}

*/

/*
This is closer to how djbsort does it (though doesn't have a neat way of constructing the syndrome... the issue is, partially, that the length is uncertain.)

property int32_minmax_equal (a, b) = int32_MINMAX (a, b) == int32_MINMAX' (a, b)

int32_MINMAX_var_j_list j (x, xs) = (pair_min, update xs j pair_max)
  where (pair_min, pair_max) = int32_MINMAX (x, (xs @ j))

//int32_MINMAX_swap : {m, ix, jx} (Integral ix, Integral jx) => (ix, jx) -> [m][32] -> [m][32]
int32_MINMAX_swap (i, j) xs = if (i >= length xs \/ j >= length xs) then xs else update final_xs i final_xi
  where (final_xi, final_xs) = int32_MINMAX_var_j_list j ((xs @ i), xs)

int32_MINMAX_swap : {n, m, ix, jx} (Integral ix, Integral jx, fin n) => (ix, [n]jx) -> [m][32] -> [m][32]
int32_MINMAX_swap (i, js) xs = update final_xs i final_xi
  where zs = [((xs @ i), xs)] # [ int32_MINMAX_var_j_list j z | z <- zs | j <- js ]
        (final_xi, final_xs) = last zs



int32_sort_syndrome : {m, n} (fin n, fin m) => [n](Integer, Integer) -> [m][32] -> [m][32]
int32_sort_syndrome syndrome xs_init = last xss
  where xss = [xs_init] # [int32_MINMAX_swap s xs | xs <- xss | s <- syndrome]

sort_2 = [                                                                (0, 1)                                                        ]
sort_3 = [                        (0, 2),                                 (0, 1),                         (1, 2)                        ]
sort_4 = [          (0, 1), (2, 3),              (0, 2), (1, 3),                                          (1, 2)                        ]
sort_5 = [(0, 4),                 (0, 2), (1, 3),         (2, 4),         (0, 1), (2, 3),         (1, 4), (1, 2),         (3, 4)        ]
sort_6 = [(0, 4), (1, 5),         (0, 2), (1, 3),         (2, 4), (3, 5), (0, 1), (2, 3), (4, 5), (1, 4), (1, 2),         (3, 4)        ]
sort_7 = [(0, 4), (1, 5), (2, 6), (0, 2), (1, 3), (4, 6), (2, 4), (3, 5), (0, 1), (2, 3), (3, 5), (1, 4), (1, 2), (3, 6), (3, 4), (5, 6)]
                        

sort_100 = [(0, 64), (1, 65), (2, 66), (3, 67), (4, 68), (5, 69), (6, 70), (7, 71), (8, 72), (9, 73), (10, 74), (11, 75), (12, 76), (13, 77), (14, 78), (15, 79), (16, 80), (17, 81), (18, 82), (19, 83), (20, 84), (21, 85), (22, 86), (23, 87), (24, 88), (25, 89), (26, 90), (27, 91), (28, 92), (29, 93), (30, 94), (31, 95), (32, 96), (33, 97), (34, 98), (35, 99), (0, 32), (1, 33), (2, 34), (3, 35), (4, 36), (5, 37), (6, 38), (7, 39), (8, 40), (9, 41), (10, 42), (11, 43), (12, 44), (13, 45), (14, 46), (15, 47), (16, 48), (17, 49), (18, 50), (19, 51), (20, 52), (21, 53), (22, 54), (23, 55), (24, 56), (25, 57), (26, 58), (27, 59), (28, 60), (29, 61), (30, 62), (31, 63), (64, 96), (65, 97), (66, 98), (67, 99), (32, 64), (33, 65), (34, 66), (35, 67), (36, 68), (37, 69), (38, 70), (39, 71), (40, 72), (41, 73), (42, 74), (43, 75), (44, 76), (45, 77), (46, 78), (47, 79), (48, 80), (49, 81), (50, 82), (51, 83), (52, 84), (53, 85), (54, 86), (55, 87), (56, 88), (57, 89), (58, 90), (59, 91), (60, 92), (61, 93), (62, 94), (63, 95), (0, 16), (1, 17), (2, 18), (3, 19), (4, 20), (5, 21), (6, 22), (7, 23), (8, 24), (9, 25), (10, 26), (11, 27), (12, 28), (13, 29), (14, 30), (15, 31), (32, 48), (33, 49), (34, 50), (35, 51), (36, 52), (37, 53), (38, 54), (39, 55), (40, 56), (41, 57), (42, 58), (43, 59), (44, 60), (45, 61), (46, 62), (47, 63), (64, 80), (65, 81), (66, 82), (67, 83), (68, 84), (69, 85), (70, 86), (71, 87), (72, 88), (73, 89), (74, 90), (75, 91), (76, 92), (77, 93), (78, 94), (79, 95), (16, 64), (16, 32), (17, 65), (17, 33), (18, 66), (18, 34), (19, 67), (19, 35), (20, 68), (20, 36), (21, 69), (21, 37), (22, 70), (22, 38), (23, 71), (23, 39), (24, 72), (24, 40), (25, 73), (25, 41), (26, 74), (26, 42), (27, 75), (27, 43), (28, 76), (28, 44), (29, 77), (29, 45), (30, 78), (30, 46), (31, 79), (31, 47), (48, 96), (48, 64), (49, 97), (49, 65), (50, 98), (50, 66), (51, 99), (51, 67), (52, 68), (53, 69), (54, 70), (55, 71), (56, 72), (57, 73), (58, 74), (59, 75), (60, 76), (61, 77), (62, 78), (63, 79), (80, 96), (81, 97), (82, 98), (83, 99), (0, 8), (1, 9), (2, 10), (3, 11), (4, 12), (5, 13), (6, 14), (7, 15), (16, 24), (17, 25), (18, 26), (19, 27), (20, 28), (21, 29), (22, 30), (23, 31), (32, 40), (33, 41), (34, 42), (35, 43), (36, 44), (37, 45), (38, 46), (39, 47), (48, 56), (49, 57), (50, 58), (51, 59), (52, 60), (53, 61), (54, 62), (55, 63), (64, 72), (65, 73), (66, 74), (67, 75), (68, 76), (69, 77), (70, 78), (71, 79), (80, 88), (81, 89), (82, 90), (83, 91), (84, 92), (85, 93), (86, 94), (87, 95), (8, 64), (8, 32), (8, 16), (9, 65), (9, 33), (9, 17), (10, 66), (10, 34), (10, 18), (11, 67), (11, 35), (11, 19), (12, 68), (12, 36), (12, 20), (13, 69), (13, 37), (13, 21), (14, 70), (14, 38), (14, 22), (15, 71), (15, 39), (15, 23), (24, 80), (24, 48), (24, 32), (25, 81), (25, 49), (25, 33), (26, 82), (26, 50), (26, 34), (27, 83), (27, 51), (27, 35), (28, 84), (28, 52), (28, 36), (29, 85), (29, 53), (29, 37), (30, 86), (30, 54), (30, 38), (31, 87), (31, 55), (31, 39), (40, 96), (40, 64), (40, 48), (41, 97), (41, 65), (41, 49), (42, 98), (42, 66), (42, 50), (43, 99), (43, 67), (43, 51), (44, 68), (44, 52), (45, 69), (45, 53), (46, 70), (46, 54), (47, 71), (47, 55), (56, 80), (56, 64), (57, 81), (57, 65), (58, 82), (58, 66), (59, 83), (59, 67), (60, 84), (60, 68), (61, 85), (61, 69), (62, 86), (62, 70), (63, 87), (63, 71), (72, 96), (72, 80), (73, 97), (73, 81), (74, 98), (74, 82), (75, 99), (75, 83), (76, 84), (77, 85), (78, 86), (79, 87), (88, 96), (89, 97), (90, 98), (91, 99), (0, 4), (1, 5), (2, 6), (3, 7), (8, 12), (9, 13), (10, 14), (11, 15), (16, 20), (17, 21), (18, 22), (19, 23), (24, 28), (25, 29), (26, 30), (27, 31), (32, 36), (33, 37), (34, 38), (35, 39), (40, 44), (41, 45), (42, 46), (43, 47), (48, 52), (49, 53), (50, 54), (51, 55), (56, 60), (57, 61), (58, 62), (59, 63), (64, 68), (65, 69), (66, 70), (67, 71), (72, 76), (73, 77), (74, 78), (75, 79), (80, 84), (81, 85), (82, 86), (83, 87), (88, 92), (89, 93), (90, 94), (91, 95), (4, 64), (4, 32), (4, 16), (4, 8), (5, 65), (5, 33), (5, 17), (5, 9), (6, 66), (6, 34), (6, 18), (6, 10), (7, 67), (7, 35), (7, 19), (7, 11), (12, 72), (12, 40), (12, 24), (12, 16), (13, 73), (13, 41), (13, 25), (13, 17), (14, 74), (14, 42), (14, 26), (14, 18), (15, 75), (15, 43), (15, 27), (15, 19), (20, 80), (20, 48), (20, 32), (20, 24), (21, 81), (21, 49), (21, 33), (21, 25), (22, 82), (22, 50), (22, 34), (22, 26), (23, 83), (23, 51), (23, 35), (23, 27), (28, 88), (28, 56), (28, 40), (28, 32), (29, 89), (29, 57), (29, 41), (29, 33), (30, 90), (30, 58), (30, 42), (30, 34), (31, 91), (31, 59), (31, 43), (31, 35), (36, 96), (36, 64), (36, 48), (36, 40), (37, 97), (37, 65), (37, 49), (37, 41), (38, 98), (38, 66), (38, 50), (38, 42), (39, 99), (39, 67), (39, 51), (39, 43), (44, 72), (44, 56), (44, 48), (45, 73), (45, 57), (45, 49), (46, 74), (46, 58), (46, 50), (47, 75), (47, 59), (47, 51), (52, 80), (52, 64), (52, 56), (53, 81), (53, 65), (53, 57), (54, 82), (54, 66), (54, 58), (55, 83), (55, 67), (55, 59), (60, 88), (60, 72), (60, 64), (61, 89), (61, 73), (61, 65), (62, 90), (62, 74), (62, 66), (63, 91), (63, 75), (63, 67), (68, 96), (68, 80), (68, 72), (69, 97), (69, 81), (69, 73), (70, 98), (70, 82), (70, 74), (71, 99), (71, 83), (71, 75), (76, 88), (76, 80), (77, 89), (77, 81), (78, 90), (78, 82), (79, 91), (79, 83), (84, 96), (84, 88), (85, 97), (85, 89), (86, 98), (86, 90), (87, 99), (87, 91), (92, 96), (93, 97), (94, 98), (95, 99), (0, 2), (1, 3), (4, 6), (5, 7), (8, 10), (9, 11), (12, 14), (13, 15), (16, 18), (17, 19), (20, 22), (21, 23), (24, 26), (25, 27), (28, 30), (29, 31), (32, 34), (33, 35), (36, 38), (37, 39), (40, 42), (41, 43), (44, 46), (45, 47), (48, 50), (49, 51), (52, 54), (53, 55), (56, 58), (57, 59), (60, 62), (61, 63), (64, 66), (65, 67), (68, 70), (69, 71), (72, 74), (73, 75), (76, 78), (77, 79), (80, 82), (81, 83), (84, 86), (85, 87), (88, 90), (89, 91), (92, 94), (93, 95), (96, 98), (97, 99), (2, 64), (2, 32), (2, 16), (2, 8), (2, 4), (3, 65), (3, 33), (3, 17), (3, 9), (3, 5), (6, 68), (6, 36), (6, 20), (6, 12), (6, 8), (7, 69), (7, 37), (7, 21), (7, 13), (7, 9), (10, 72), (10, 40), (10, 24), (10, 16), (10, 12), (11, 73), (11, 41), (11, 25), (11, 17), (11, 13), (14, 76), (14, 44), (14, 28), (14, 20), (14, 16), (15, 77), (15, 45), (15, 29), (15, 21), (15, 17), (18, 80), (18, 48), (18, 32), (18, 24), (18, 20), (19, 81), (19, 49), (19, 33), (19, 25), (19, 21), (22, 84), (22, 52), (22, 36), (22, 28), (22, 24), (23, 85), (23, 53), (23, 37), (23, 29), (23, 25), (26, 88), (26, 56), (26, 40), (26, 32), (26, 28), (27, 89), (27, 57), (27, 41), (27, 33), (27, 29), (30, 92), (30, 60), (30, 44), (30, 36), (30, 32), (31, 93), (31, 61), (31, 45), (31, 37), (31, 33), (34, 96), (34, 64), (34, 48), (34, 40), (34, 36), (35, 97), (35, 65), (35, 49), (35, 41), (35, 37), (38, 68), (38, 52), (38, 44), (38, 40), (39, 69), (39, 53), (39, 45), (39, 41), (42, 72), (42, 56), (42, 48), (42, 44), (43, 73), (43, 57), (43, 49), (43, 45), (46, 76), (46, 60), (46, 52), (46, 48), (47, 77), (47, 61), (47, 53), (47, 49), (50, 80), (50, 64), (50, 56), (50, 52), (51, 81), (51, 65), (51, 57), (51, 53), (54, 84), (54, 68), (54, 60), (54, 56), (55, 85), (55, 69), (55, 61), (55, 57), (58, 88), (58, 72), (58, 64), (58, 60), (59, 89), (59, 73), (59, 65), (59, 61), (62, 92), (62, 76), (62, 68), (62, 64), (63, 93), (63, 77), (63, 69), (63, 65), (66, 96), (66, 80), (66, 72), (66, 68), (67, 97), (67, 81), (67, 73), (67, 69), (70, 84), (70, 76), (70, 72), (71, 85), (71, 77), (71, 73), (74, 88), (74, 80), (74, 76), (75, 89), (75, 81), (75, 77), (78, 92), (78, 84), (78, 80), (79, 93), (79, 85), (79, 81), (82, 96), (82, 88), (82, 84), (83, 97), (83, 89), (83, 85), (86, 92), (86, 88), (87, 93), (87, 89), (90, 96), (90, 92), (91, 97), (91, 93), (94, 96), (95, 97), (0, 1), (2, 3), (4, 5), (6, 7), (8, 9), (10, 11), (12, 13), (14, 15), (16, 17), (18, 19), (20, 21), (22, 23), (24, 25), (26, 27), (28, 29), (30, 31), (32, 33), (34, 35), (36, 37), (38, 39), (40, 41), (42, 43), (44, 45), (46, 47), (48, 49), (50, 51), (52, 53), (54, 55), (56, 57), (58, 59), (60, 61), (62, 63), (64, 65), (66, 67), (68, 69), (70, 71), (72, 73), (74, 75), (76, 77), (78, 79), (80, 81), (82, 83), (84, 85), (86, 87), (88, 89), (90, 91), (92, 93), (94, 95), (96, 97), (98, 99), (1, 64), (1, 32), (1, 16), (1, 8), (1, 4), (1, 2), (3, 66), (3, 34), (3, 18), (3, 10), (3, 6), (3, 4), (5, 68), (5, 36), (5, 20), (5, 12), (5, 8), (5, 6), (7, 70), (7, 38), (7, 22), (7, 14), (7, 10), (7, 8), (9, 72), (9, 40), (9, 24), (9, 16), (9, 12), (9, 10), (11, 74), (11, 42), (11, 26), (11, 18), (11, 14), (11, 12), (13, 76), (13, 44), (13, 28), (13, 20), (13, 16), (13, 14), (15, 78), (15, 46), (15, 30), (15, 22), (15, 18), (15, 16), (17, 80), (17, 48), (17, 32), (17, 24), (17, 20), (17, 18), (19, 82), (19, 50), (19, 34), (19, 26), (19, 22), (19, 20), (21, 84), (21, 52), (21, 36), (21, 28), (21, 24), (21, 22), (23, 86), (23, 54), (23, 38), (23, 30), (23, 26), (23, 24), (25, 88), (25, 56), (25, 40), (25, 32), (25, 28), (25, 26), (27, 90), (27, 58), (27, 42), (27, 34), (27, 30), (27, 28), (29, 92), (29, 60), (29, 44), (29, 36), (29, 32), (29, 30), (31, 94), (31, 62), (31, 46), (31, 38), (31, 34), (31, 32), (33, 96), (33, 64), (33, 48), (33, 40), (33, 36), (33, 34), (35, 98), (35, 66), (35, 50), (35, 42), (35, 38), (35, 36), (37, 68), (37, 52), (37, 44), (37, 40), (37, 38), (39, 70), (39, 54), (39, 46), (39, 42), (39, 40), (41, 72), (41, 56), (41, 48), (41, 44), (41, 42), (43, 74), (43, 58), (43, 50), (43, 46), (43, 44), (45, 76), (45, 60), (45, 52), (45, 48), (45, 46), (47, 78), (47, 62), (47, 54), (47, 50), (47, 48), (49, 80), (49, 64), (49, 56), (49, 52), (49, 50), (51, 82), (51, 66), (51, 58), (51, 54), (51, 52), (53, 84), (53, 68), (53, 60), (53, 56), (53, 54), (55, 86), (55, 70), (55, 62), (55, 58), (55, 56), (57, 88), (57, 72), (57, 64), (57, 60), (57, 58), (59, 90), (59, 74), (59, 66), (59, 62), (59, 60), (61, 92), (61, 76), (61, 68), (61, 64), (61, 62), (63, 94), (63, 78), (63, 70), (63, 66), (63, 64), (65, 96), (65, 80), (65, 72), (65, 68), (65, 66), (67, 98), (67, 82), (67, 74), (67, 70), (67, 68), (69, 84), (69, 76), (69, 72), (69, 70), (71, 86), (71, 78), (71, 74), (71, 72), (73, 88), (73, 80), (73, 76), (73, 74), (75, 90), (75, 82), (75, 78), (75, 76), (77, 92), (77, 84), (77, 80), (77, 78), (79, 94), (79, 86), (79, 82), (79, 80), (81, 96), (81, 88), (81, 84), (81, 82), (83, 98), (83, 90), (83, 86), (83, 84), (85, 92), (85, 88), (85, 86), (87, 94), (87, 90), (87, 88), (89, 96), (89, 92), (89, 90), (91, 98), (91, 94), (91, 92), (93, 96), (93, 94), (95, 98), (95, 96), (97, 98)]

property int32_sort_2_sorted xs = int32_sorted (int32_sort_syndrome`{2} sort_100 xs)
property int32_sort_3_sorted xs = int32_sorted (int32_sort_syndrome`{3} sort_100 xs)
property int32_sort_4_sorted xs = int32_sorted (int32_sort_syndrome`{4} sort_4 xs)
property int32_sort_5_sorted xs = int32_sorted (int32_sort_syndrome`{5} sort_100 xs)
property int32_sort_6_sorted xs = int32_sorted (int32_sort_syndrome`{6} sort_100 xs)
property int32_sort_20_sorted xs = int32_sorted (int32_sort_syndrome`{20} sort_100 xs)
property int32_sort_100_sorted xs = int32_sorted (int32_sort_syndrome`{100} sort_100 xs)

*/