// mceliece248864


include "helper.saw";


// Module
linked_mod <- llvm_load_module "../artifacts/linked.bc";

// Cry files
import "../specs/params.cry";
import "../specs/gf.cry";
import "../specs/util.cry";
import "../specs/root.cry";
import "../specs/synd.cry";
import "../specs/transpose.cry";
import "../specs/bm.cry";
import "../specs/encrypt.cry";
import "../specs/sort.cry";

// Params and Definitions

let SYS_T = eval_int {{SYS_T : [width SYS_T_t]}};
let SYS_N = eval_int {{SYS_N : [width SYS_N_t]}};

let gf_type = llvm_int 16;

/////////////// gf.c specs ///////////////

let gf_iszero_spec = do {
  // Initialise variable(s).
  a <- llvm_fresh_var "a" gf_type; 

  // Run function.
  llvm_execute_func [llvm_term a];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ gf_iszero a }});
};


let gf_add_spec = do {
  // Initialise variable(s).
  in0 <- llvm_fresh_var "in0" gf_type;
  in1 <- llvm_fresh_var "in1" gf_type;

  // Run function.
  llvm_execute_func [llvm_term in0, llvm_term in1];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term{{ gf_add in0 in1 }});
};

let gf_mul_spec = do {
  // Initialise variable(s).
  x <- llvm_fresh_var "in0" gf_type;
  y <- llvm_fresh_var "in1" gf_type;

  // Run function.
  llvm_execute_func [llvm_term x, llvm_term y];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ gf_mul x y }});

};

let gf_mul'_spec = do {
  // Initialise variable(s).
  x <- llvm_fresh_var "in0" gf_type;
  y <- llvm_fresh_var "in1" gf_type;

  llvm_precond {{ ((gf_valid x) /\ (gf_valid y)) }};

  // Run function.
  llvm_execute_func [llvm_term x, llvm_term y];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ gf_mul' x y }});

};

let gf_sq_spec = do {
  // Initialise variable(s).
  x <- llvm_fresh_var "in" gf_type;

  // Run function.
  llvm_execute_func [llvm_term x];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ gf_sq x }});
};

let gf_sq'_spec = do {

  // Initialise variable(s).
  x <- llvm_fresh_var "in" gf_type;

  llvm_precond {{ gf_valid x }};

  // Run function.
  llvm_execute_func [llvm_term x];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ gf_sq' x }});
};

let gf_inv_spec = do {
  // Initialise variable(s).
  x <- llvm_fresh_var "in" gf_type;

  // Run function.
  llvm_execute_func [llvm_term x];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ gf_inv x }});
};

let gf_inv'_spec = do {
  // Initialise variable(s).
  x <- llvm_fresh_var "in" gf_type;

  llvm_precond {{ gf_valid x }};

  // Run function.
  llvm_execute_func [llvm_term x];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ gf_inv' x }});
};

let gf_frac_spec = do {
  // Initialise variable(s).
  x <- llvm_fresh_var "den" gf_type;
  y <- llvm_fresh_var "num" gf_type;


  // Run function.
  llvm_execute_func [llvm_term x, llvm_term y];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ gf_frac x y }});
};

let gf_frac'_spec = do {
  // Initialise variable(s).
  x <- llvm_fresh_var "den" gf_type;
  y <- llvm_fresh_var "num" gf_type;

  llvm_precond {{ ((gf_valid x) /\ (gf_valid y)) }};

  // Run function.
  llvm_execute_func [llvm_term x, llvm_term y];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ gf_frac' x y }});
};

let GF_mul_spec = do {
  // Initialise variable(s).
  po <- llvm_alloc (llvm_array SYS_T gf_type);
  (x, px) <- ptr_to_fresh_readonly "in0" (llvm_array SYS_T gf_type);
  (y, py) <- ptr_to_fresh_readonly "in1" (llvm_array SYS_T gf_type);

  // Run function.
  llvm_execute_func [po, px, py];

  // Result is equivalent to Cryptol function.
  llvm_points_to po (llvm_term {{ GF_mul x y }});
};


/////////////// root.c specs ///////////////

let eval_spec = do {
  // Initialise variable(s).
  (f, pf) <- ptr_to_fresh_readonly "f" (llvm_array 65 gf_type);
  a <- llvm_fresh_var "a" gf_type;

  // Run function.
  llvm_execute_func [pf, llvm_term a];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ eval f a }});
};

let root_spec = do {
  // Initialise variable(s).
  pout <- llvm_alloc (llvm_array SYS_N gf_type);
  (f, pf) <- ptr_to_fresh_readonly "f" (llvm_array (eval_int {{SYS_T + 1 : [width (SYS_T_t + 1)]}}) gf_type);
  (L, pL) <- ptr_to_fresh_readonly "L" (llvm_array SYS_N gf_type);

  // Run function.
  llvm_execute_func [pout, pf, pL];

  // Result is equivalent to Cryptol function.
  llvm_points_to pout (llvm_term {{ root f L }});
};

/////////////// util.c specs ///////////////

let store_gf_spec = do {
  // Initialise variable(s).
  pdest <- llvm_alloc (llvm_array 2 (llvm_int 8));
  a <- llvm_fresh_var "a" gf_type;

  // Run function.
  llvm_execute_func [pdest, llvm_term a];

  // Result is equivalent to Cryptol function.
  llvm_points_to pdest (llvm_term {{ store_gf a }});
};

let load_gf_spec = do {
  // Initialise variable(s).
  (src, psrc) <- ptr_to_fresh_readonly "src" (llvm_array 2 (llvm_int 8));

  // Run function.
  llvm_execute_func [psrc];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ load_gf src }});
};

let load4_spec = do {
  // Initialise variable(s).
  (in_var, pin) <- ptr_to_fresh_readonly "in" (llvm_array 4 (llvm_int 8));

  // Run function.
  llvm_execute_func [pin];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ load4 in_var }});
};

let store8_spec = do {
  // Initialise variable(s).
  pout <- llvm_alloc (llvm_array 8 (llvm_int 8));
  in_var <- llvm_fresh_var "in" (llvm_int 64);

  // Run function.
  llvm_execute_func [pout, llvm_term in_var];

  // Result is equivalent to Cryptol function.
  llvm_points_to pout (llvm_term {{ store8 in_var }});
};

let load8_spec = do {
  // Initialise variable(s).
  (in_var, pin) <- ptr_to_fresh_readonly "in" (llvm_array 8 (llvm_int 8));

  // Run function.
  llvm_execute_func [pin];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ load8 in_var }});
};

let bitrev_spec = do {
  // Initialise variable(s).
  a <- llvm_fresh_var "a" gf_type; 

  // Run function.
  llvm_execute_func [llvm_term a];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ bitrev a }});
};

/////////////// synd.c specs ///////////////

let synd_spec = do {
  // Initialise variable(s).
  pout <- llvm_alloc (llvm_array (eval_int {{2*SYS_T : [width 2*SYS_T_t]}}) gf_type);
  (f, pf) <- ptr_to_fresh_readonly "f" (llvm_array (eval_int {{SYS_T + 1 : [width (SYS_T_t + 1)]}}) gf_type);
  (L, pL) <- ptr_to_fresh_readonly "L" (llvm_array SYS_N gf_type);
  (r, pr) <- ptr_to_fresh_readonly "r" (llvm_array (eval_int {{SYS_N/8 : [width SYS_N_t]}}) (llvm_int 8));

  // Run function.
  llvm_execute_func [pout, pf, pL, pr];

  // Result is equivalent to Cryptol function.
  llvm_points_to pout (llvm_term {{ synd f L r }});
};

let synd_loop_spec = do {
  // Initialise variable(s).
  (in_v, pin) <- ptr_to_fresh "in" (llvm_array (eval_int {{2*SYS_T : [width 2*SYS_T_t]}}) gf_type);
  (f, pf) <- ptr_to_fresh_readonly "f" (llvm_array (eval_int {{SYS_T + 1 : [width (SYS_T_t + 1)]}}) gf_type);
  li <- llvm_fresh_var "li" gf_type;
  c <- llvm_fresh_var "c" gf_type;
  llvm_precond({{take`{15} c == zero}});
  // Run function.
  llvm_execute_func [pin, pf, llvm_term li, llvm_term c];

  // Result is equivalent to Cryptol function.
  llvm_points_to pin (llvm_term {{ synd_loop f li c in_v }});
};


/////////////// transpose.c specs ///////////////
let transpose_64x64_spec = do {
  // Initialise variable(s).
  pout <- llvm_alloc (llvm_array 64 (llvm_int 64));
  (in_v, pin) <- ptr_to_fresh "in" (llvm_array 64 (llvm_int 64));

  // Run function.
  llvm_execute_func [pout, pin];

  // Result is equivalent to Cryptol function.
  llvm_points_to pout (llvm_term {{ transpose_64x64 in_v }});
};

/////////////// bm.c specs ///////////////
let bm_spec = do {
  // Initialise variable(s).
  pout <- llvm_alloc (llvm_array (eval_int {{SYS_T + 1 : [width (SYS_T_t + 1)]}}) gf_type);
  (s, ps) <- ptr_to_fresh "in" (llvm_array (eval_int {{2*SYS_T : [width 2*SYS_T_t]}}) gf_type);

  // Run function.
  llvm_execute_func [pout, ps];

  // Result is equivalent to Cryptol function.
  llvm_points_to pout (llvm_term {{ bm s }});
};

let bm_calc_spec = do {
  // Initialise variable(s).
  pd <- llvm_alloc gf_type;
  (s, ps) <- ptr_to_fresh_readonly "in" (llvm_array (eval_int {{2*SYS_T : [width 2*SYS_T_t]}}) gf_type);
  (C, pC) <- ptr_to_fresh_readonly "C" (llvm_array (eval_int {{SYS_T + 1 : [width (SYS_T_t + 1)]}}) gf_type);
  N <- llvm_fresh_var "N" (llvm_int 16);

  // Run function.
  llvm_execute_func [pd, ps, pC, llvm_term N];

  // Result is equivalent to Cryptol function.
  llvm_points_to pd (llvm_term {{ bm_calc s C N }});
};

let bm_modif_spec = do {
  // Initialise variable(s).
    // (const uint16_t N, const gf d, gf *B, gf *C, gf *b_pt, uint16_t *L_pt)
  N <- llvm_fresh_var "N" (llvm_int 16);
  d <- llvm_fresh_var "d" gf_type;
  (B, pB) <- ptr_to_fresh "B" (llvm_array (eval_int {{SYS_T + 1 : [width (SYS_T_t + 1)]}}) gf_type);
  (C, pC) <- ptr_to_fresh "C" (llvm_array (eval_int {{SYS_T + 1 : [width (SYS_T_t + 1)]}}) gf_type);
  (b, pb) <- ptr_to_fresh "b" gf_type;
  (L, pL) <- ptr_to_fresh "L" (llvm_int 16);

  // Run function.
  llvm_execute_func [llvm_term N, llvm_term d, pB, pC, pb, pL];
  let {{ (B_final, C_final, b_final, L_final) = bm_modif N d (B, C, b, L) }};
  // Result is equivalent to Cryptol function.
  llvm_points_to pB (llvm_term {{ B_final }});
  llvm_points_to pC (llvm_term {{ C_final }});
  llvm_points_to pb (llvm_term {{ b_final }});
  llvm_points_to pL (llvm_term {{ L_final }});
};

let bm_loop_spec = do {
  // Initialise variable(s).
  (s, ps) <- ptr_to_fresh_readonly "in" (llvm_array (eval_int {{2*SYS_T : [width 2*SYS_T_t]}}) gf_type);
  N <- llvm_fresh_var "N" (llvm_int 16);
  (B, pB) <- ptr_to_fresh "B" (llvm_array (eval_int {{SYS_T + 1 : [width (SYS_T_t + 1)]}}) gf_type);
  (C, pC) <- ptr_to_fresh "C" (llvm_array (eval_int {{SYS_T + 1 : [width (SYS_T_t + 1)]}}) gf_type);
  (b, pb) <- ptr_to_fresh "b" gf_type;
  (L, pL) <- ptr_to_fresh "L" (llvm_int 16);

  llvm_precond {{ N < 2*SYS_T }};
  // Run function.
  llvm_execute_func [ps, llvm_term N, pB, pC, pb, pL];
  let {{ (B_final, C_final, b_final, L_final) = bm_loop s N (B, C, b, L) }};
  // Result is equivalent to Cryptol function.
  llvm_points_to pB (llvm_term {{ B_final }});
  llvm_points_to pC (llvm_term {{ C_final }});
  llvm_points_to pb (llvm_term {{ b_final }});
  llvm_points_to pL (llvm_term {{ L_final }});
};

/////////////// encrypt.c specs ///////////////
let same_mask_spec = do {
  // Initialise variable(s).
  x <- llvm_fresh_var "x" (llvm_int 16);
  y <- llvm_fresh_var "y" (llvm_int 16);

  // Run function.
  llvm_execute_func [llvm_term x, llvm_term y];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ same_mask x y }});
};

let syndrome_spec = do {
  // Initialise variable(s).
  ps <- llvm_alloc (llvm_array (eval_int {{SYND_BYTES : [width SYND_BYTES_t]}}) (llvm_int 8));
  (pk, ppk) <- ptr_to_fresh_readonly "pk" (llvm_array (eval_int {{PK_NROWS*PK_ROW_BYTES : [width PK_NROWS_t*PK_ROW_BYTES_t]}}) (llvm_int 8));
  (e, pe) <- ptr_to_fresh_readonly "e" (llvm_array (eval_int {{SYS_N/8 : [width SYS_N_t]}}) (llvm_int 8));

  // Run function.
  llvm_execute_func [ps, ppk, pe];

  // Result is equivalent to Cryptol function.
  llvm_points_to ps (llvm_term {{ syndrome pk e }});
};

let b_func_spec = do {
  // Initialise variable(s).
  b <- llvm_fresh_var "b" (llvm_int 8);

  // Run function.
  llvm_execute_func [llvm_term b];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ b_func b }});
};

let bytes_bit_dotprod_spec = do {
  // Initialise variable(s).
  (u, pu) <- ptr_to_fresh_readonly "u" (llvm_array 340 (llvm_int 8));
  (v, pv) <- ptr_to_fresh_readonly "v" (llvm_array 340 (llvm_int 8));
  // Run function.
  llvm_execute_func [pu, pv, llvm_term {{PK_ROW_BYTES : [64]}}];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ bytes_bit_dotprod`{PK_ROW_BYTES_t} u v }});
};

let bytes_bit_mul_block_spec = do {
  // Initialise variable(s).
  (us, pus) <- ptr_to_fresh_readonly "us" (llvm_array (eval_int {{8*PK_ROW_BYTES : [width 8*PK_ROW_BYTES_t]}}) (llvm_int 8));
  (v, pv) <- ptr_to_fresh_readonly "v" (llvm_array (eval_int {{PK_ROW_BYTES : [width PK_ROW_BYTES_t]}}) (llvm_int 8));
  // Run function.
  llvm_execute_func [pus, pv, llvm_term {{PK_ROW_BYTES : [64]}}];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ bytes_bit_mul_block`{PK_ROW_BYTES_t} us v }});
};

let syndrome_bytewise_spec = do {
  // Initialise variable(s).
  ps <- llvm_alloc (llvm_array (eval_int {{SYND_BYTES : [width SYND_BYTES_t]}}) (llvm_int 8));
  (pk, ppk) <- ptr_to_fresh_readonly "pk" (llvm_array (eval_int {{PK_NROWS*PK_ROW_BYTES : [width PK_NROWS_t*PK_ROW_BYTES_t]}}) (llvm_int 8));
  (e, pe) <- ptr_to_fresh_readonly "e" (llvm_array (eval_int {{SYS_N/8 : [width SYS_N_t]}}) (llvm_int 8));

  // Run function.
  llvm_execute_func [ps, ppk, pe];

  // Result is equivalent to Cryptol function.
  llvm_points_to ps (llvm_term {{ syndrome_bytewise pk e }});
};

let syndrome_loop_spec = do {
  // Initialise variable(s).
  (e, pe) <- ptr_to_fresh_readonly "e" (llvm_array (eval_int {{SYS_N/8 : [width SYS_N_t]}}) (llvm_int 8));
  (pk, ppk) <- ptr_to_fresh_readonly "pk" (llvm_array (eval_int {{PK_ROW_BYTES : [width PK_ROW_BYTES_t]}}) (llvm_int 8));
  i <- llvm_fresh_var "i" (llvm_int 16);
  (s, ps) <- ptr_to_fresh "s" (llvm_array (eval_int {{SYND_BYTES : [width SYND_BYTES_t]}}) (llvm_int 8));
  llvm_precond {{ i < PK_NROWS }};
  // Run function.
  llvm_execute_func [pe, ppk, llvm_term i, ps];

  // Result is equivalent to Cryptol function.
  llvm_points_to ps (llvm_term {{ syndrome_loop e pk i s}});
};

let int32_sort_num = 4;

let int32_sort_spec = do {
  // Initialise variable(s).
  (x, px) <- ptr_to_fresh_readonly "x" (llvm_array int32_sort_num (llvm_int 32));

  // Run function.
  llvm_execute_func [px, llvm_term {{2 : [64]}}];

  // Result is equivalent to Cryptol function.
  llvm_points_to px (llvm_term {{ int32_sort x }});
};

let uint64_sort_num = 4;
 
let uint64_sort_spec = do {
  // Initialise variable(s).
  (xs, pxs) <- ptr_to_fresh "xs" (llvm_array uint64_sort_num (llvm_int 64));
  llvm_precond {{ all (\x -> x@0 == 0) xs }};
  // Run function.
  llvm_execute_func [pxs, llvm_term {{`uint64_sort_num : [64]}}];
 
  // Result is equivalent to Cryptol function.
  llvm_points_to pxs (llvm_term {{ uint64_sort xs }});
};

// bytewise synd stuff

let zadd_spec = do {
  // Initialise variable(s).
  (addval, paddval) <- ptr_to_fresh_readonly "addval" (llvm_array 8 gf_type);
  z <- llvm_fresh_var "z" gf_type;

  // Run function.
  llvm_execute_func [llvm_term {{z}}, paddval];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ zadd z addval }});
};

let synd_byte_add_spec = do {
  // Initialise variable(s).
  (zs, pzs) <- ptr_to_fresh "zs" (llvm_array (eval_int {{2*SYS_T : [width 2*SYS_T_t]}}) gf_type);
  (addvals, paddvals) <- ptr_to_fresh_readonly "addvals" (llvm_array (eval_int {{2*SYS_T : [width 2*SYS_T_t]}}) (llvm_array 8 gf_type));
  // Run function.
  llvm_execute_func [pzs, paddvals];

  // Result is equivalent to Cryptol function.
  llvm_points_to pzs (llvm_term {{ synd_byte_add addvals zs }});
};

let synd_byte_einv_spec = do {
  // Initialise variable(s).
  pout <- llvm_alloc (llvm_array 8 gf_type);
  (f, pf) <- ptr_to_fresh_readonly "f" (llvm_array (eval_int {{SYS_T + 1 : [width SYS_T_t + 1]}}) gf_type);
  (lis, plis) <- ptr_to_fresh_readonly "lis" (llvm_array 8 gf_type);

  // Run function.
  llvm_execute_func [pout, pf, plis];

  // Result is equivalent to Cryptol function.
  llvm_points_to pout (llvm_term {{ synd_byte_einv f lis }});
};

let selector_spec = do {
  // Initialise variable(s).
  (out, pout) <- ptr_to_fresh "out" (llvm_array 8 gf_type);
  byt <- llvm_fresh_var "byt" (llvm_int 8);
  // Run function.
  llvm_execute_func [pout, llvm_term{{byt}}];

  // Result is equivalent to Cryptol function.
  llvm_points_to pout (llvm_term {{ selector byt out }});
};

let synd_byte_seleinv_spec = do {
  // Initialise variable(s).
  pout <- llvm_alloc (llvm_array 8 gf_type);
  byt <- llvm_fresh_var "byt" (llvm_int 8);
  (f, pf) <- ptr_to_fresh_readonly "f" (llvm_array (eval_int {{SYS_T + 1 : [width SYS_T_t + 1]}}) gf_type);
  (lis, plis) <- ptr_to_fresh_readonly "lis" (llvm_array 8 gf_type);
  // Run function.
  llvm_execute_func [pout, llvm_term{{byt}}, pf, plis];

  // Result is equivalent to Cryptol function.
  llvm_points_to pout (llvm_term {{ synd_byte_seleinv byt f lis }});
};

let synd_byte_addvals_spec = do {
  // Initialise variable(s).
  pout <- llvm_alloc (llvm_array (eval_int {{2*SYS_T : [width 2*SYS_T_t]}}) (llvm_array 8 gf_type));
  (inits, pinits) <- ptr_to_fresh_readonly "inits" (llvm_array 8 gf_type);
  (lis, plis) <- ptr_to_fresh_readonly "lis" (llvm_array 8 gf_type);
  // Run function.
  llvm_execute_func [pout, pinits, plis];

  // Result is equivalent to Cryptol function.
  llvm_points_to pout (llvm_term {{ synd_byte_addvals inits lis }});
};

let synd_bytewise_byt_spec = do {
  // Initialise variable(s).
  (zs, pzs) <- ptr_to_fresh "zs" (llvm_array (eval_int {{2*SYS_T : [width 2*SYS_T_t]}}) gf_type);
  byt <- llvm_fresh_var "byt" (llvm_int 8);
  (f, pf) <- ptr_to_fresh_readonly "f" (llvm_array (eval_int {{SYS_T + 1 : [width (SYS_T_t + 1)]}}) gf_type);
  (lis, plis) <- ptr_to_fresh_readonly "lis" (llvm_array 8 gf_type);
  // Run function.
  llvm_execute_func [pzs, llvm_term{{byt}}, pf, plis];

  // Result is equivalent to Cryptol function.
  llvm_points_to pzs (llvm_term {{ synd_bytewise_byt byt f lis zs }});
};

let synd_bytewise_spec = do {
  // Initialise variable(s).
  pout <- llvm_alloc (llvm_array (eval_int {{2*SYS_T : [width 2*SYS_T_t]}}) gf_type);
  (f, pf) <- ptr_to_fresh_readonly "f" (llvm_array (eval_int {{SYS_T + 1 : [width (SYS_T_t + 1)]}}) gf_type);
  (L, pL) <- ptr_to_fresh_readonly "L" (llvm_array SYS_N gf_type);
  (r, pr) <- ptr_to_fresh_readonly "r" (llvm_array (eval_int {{SYS_N/8 : [width SYS_N_t]}}) (llvm_int 8));
  // Run function.
  llvm_execute_func [pout, pf, pL, pr];

  // Result is equivalent to Cryptol function.
  llvm_points_to pout (llvm_term {{ synd_bytewise f L r }});
};

let synd_bytewise_init_spec = do {
  // Initialise variable(s).
  pout <- llvm_alloc (llvm_array (eval_int {{SYS_N : [width SYS_N_t]}}) gf_type);
  (f, pf) <- ptr_to_fresh_readonly "f" (llvm_array (eval_int {{SYS_T + 1 : [width (SYS_T_t + 1)]}}) gf_type);
  (L, pL) <- ptr_to_fresh_readonly "L" (llvm_array SYS_N gf_type);
  (r, pr) <- ptr_to_fresh_readonly "r" (llvm_array (eval_int {{SYS_N/8 : [width SYS_N_t]}}) (llvm_int 8));
  // Run function.
  llvm_execute_func [pout, pf, pL, pr];

  // Result is equivalent to Cryptol function.
  llvm_points_to pout (llvm_term {{ synd_bytewise_init f L r }});
};

let synd_bytewise_next_spec = do {
  // Initialise variable(s).
  pout <- llvm_alloc (llvm_array (eval_int {{SYS_N : [width SYS_N_t]}}) gf_type);
  (in_v, pin) <- ptr_to_fresh_readonly "in" (llvm_array (eval_int {{SYS_N : [width SYS_N_t]}}) gf_type);
  (L, pL) <- ptr_to_fresh_readonly "L" (llvm_array SYS_N gf_type);
  // Run function.
  llvm_execute_func [pout, pin, pL];

  // Result is equivalent to Cryptol function.
  llvm_points_to pout (llvm_term {{ synd_bytewise_next L in_v }});
};

let synd_bytewise_sum_spec = do {
  // Initialise variable(s).
  (out, pout) <- ptr_to_fresh_readonly "out" (llvm_array (eval_int {{SYS_N : [width SYS_N_t]}}) gf_type);

  // Run function.
  llvm_execute_func [pout];

  // Result is equivalent to Cryptol function.
  llvm_return (llvm_term {{ synd_bytewise_sum out }});
};

let synd_bytewise_alt_spec = do {
  // Initialise variable(s).
  pout <- llvm_alloc (llvm_array (eval_int {{2*SYS_T : [width 2*SYS_T_t]}}) gf_type);
  (f, pf) <- ptr_to_fresh_readonly "f" (llvm_array (eval_int {{SYS_T + 1 : [width (SYS_T_t + 1)]}}) gf_type);
  (L, pL) <- ptr_to_fresh_readonly "L" (llvm_array SYS_N gf_type);
  (r, pr) <- ptr_to_fresh_readonly "r" (llvm_array (eval_int {{SYS_N/8 : [width SYS_N_t]}}) (llvm_int 8));
  // Run function.
  llvm_execute_func [pout, pf, pL, pr];

  // Result is equivalent to Cryptol function.
  llvm_points_to pout (llvm_term {{ synd_bytewise_alt f L r }});
};

/////////////// Proofs ///////////////

enable_experimental;

let main : TopLevel () = do {
  //int32_sort_ov <- llvm_verify linked_mod "int32_sort" [] false //int32_sort_spec w4_z3;
  //uint64_sort_ov <- llvm_verify linked_mod "uint64_sort" [] false
  //uint64_sort_spec w4_z3;
  gf_iszero_ov <- llvm_verify linked_mod "gf_iszero" [] false gf_iszero_spec w4_z3;
  gf_add_ov <- llvm_verify linked_mod "gf_add" [] false gf_add_spec w4_z3;
  gf_mul_ov <- llvm_verify linked_mod "gf_mul" [] false gf_mul_spec w4_z3;
  //gf_mul'_ov <- llvm_verify linked_mod "gf_mul" [] false gf_mul'_spec abc;
  gf_sq_ov <- llvm_verify linked_mod "gf_sq" [] false gf_sq_spec w4_z3;
  //gf_sq'_ov <- llvm_verify linked_mod "gf_sq" [gf_mul'_ov] false gf_sq'_spec (w4_unint_z3 ["gf_mul"]);
  gf_inv_ov <- llvm_verify linked_mod "gf_inv" [gf_mul_ov, gf_sq_ov] false gf_inv_spec (w4_unint_z3 ["gf_mul", "gf_sq"]);








  //gf_inv'_ov <- llvm_verify linked_mod "gf_inv" [gf_mul'_ov] false gf_inv'_spec (w4_unint_z3 ["gf_mul"]);
  gf_frac_ov <- llvm_verify linked_mod "gf_frac" [gf_mul_ov, gf_inv_ov] false gf_frac_spec (w4_unint_z3 ["gf_mul", "gf_inv"]);
  //gf_frac'_ov <- llvm_verify linked_mod "gf_frac" [gf_mul'_ov, gf_inv'_ov] false gf_frac'_spec (w4_unint_z3 ["gf_mul", "gf_inv"]);
  GF_mul_ov <- llvm_verify linked_mod "GF_mul" [gf_mul_ov] false GF_mul_spec (offline_w4_unint_z3 ["gf_mul"] "blah");
  
  eval_ov <- llvm_verify linked_mod "eval" [gf_add_ov, gf_mul_ov] false eval_spec (unint_z3 ["gf_add", "gf_mul"]);

  root_ov <- llvm_verify linked_mod "root" [eval_ov] false root_spec (w4_unint_z3 ["eval"]);

  store_gf_ov <- llvm_verify linked_mod "store_gf" [] false store_gf_spec w4_z3;
  load_gf_ov <- llvm_verify linked_mod "load_gf" [] false load_gf_spec w4_z3;
  load4_ov <- llvm_verify linked_mod "load4" [] false load4_spec w4_z3;
  load8_ov <- llvm_verify linked_mod "load8" [] false load8_spec w4_z3;
  store8_ov <- llvm_verify linked_mod "store8" [] false store8_spec w4_z3;
  bitrev_ov <- llvm_verify linked_mod "bitrev" [] false bitrev_spec w4_z3;

  synd_loop_ov <- llvm_verify linked_mod "synd_loop" [eval_ov, gf_inv_ov, gf_add_ov, gf_mul_ov] false synd_loop_spec (w4_unint_z3 ["gf_mul", "gf_inv", "gf_add", "eval"]);

  // Can't prove - performance?
  //enable_smt_array_memory_model;
  //synd_outer_ov <- llvm_verify linked_mod "synd_outer" [synd_loop_ov] false synd_spec (offline_w4_unint_yices ["synd_loop"] "artifacts/synd_outer_smt2");
  //disable_smt_array_memory_model;

  transpose_64x64_ov <- llvm_verify linked_mod "transpose_64x64" [] false transpose_64x64_spec w4_yices;

  // "All at once" - possibly if I could get bm_calc working this would work.
  //bm_ov <- llvm_verify linked_mod "bm" [gf_mul_ov, gf_frac_ov] false bm_spec (offline_unint_smtlib2 ["gf_mul", "gf_frac"] "bm");
  
  bm_modif_ov <- llvm_verify linked_mod "bm_modif" [gf_frac_ov, gf_mul_ov] false bm_modif_spec (w4_unint_z3 ["gf_mul", "gf_frac"]);
  
  // Can't prove - performance.
  //bm_calc_ov <- llvm_verify linked_mod "bm_calc" [gf_mul_ov] false bm_calc_spec (w4_unint_z3 ["gf_mul"]);
  bm_calc_ov <- llvm_unsafe_assume_spec linked_mod "bm_calc" bm_calc_spec;
  
  bm_loop_ov <- llvm_verify linked_mod "bm_loop" [bm_modif_ov, bm_calc_ov] false bm_loop_spec (w4_unint_z3 ["bm_modif", "bm_calc"]);
  //bm_outer_ov <- llvm_verify linked_mod "bm_outer" [bm_loop_ov] false bm_spec (w4_unint_z3 ["bm_loop"]);
  
  same_mask_ov <- llvm_verify linked_mod "same_mask" [] false same_mask_spec w4_z3;
  
  //syndrome_ov <- llvm_verify linked_mod "syndrome" [] false syndrome_spec w4_z3;
  b_func_ov <- llvm_verify linked_mod "b_func" [] false b_func_spec w4_z3;

  bytes_bit_dotprod_ov <- llvm_verify linked_mod "bytes_bit_dotprod" [b_func_ov] false bytes_bit_dotprod_spec (w4_unint_z3 ["b_func"]);
  bytes_bit_mul_block_ov <- llvm_verify linked_mod "bytes_bit_mul_block" [bytes_bit_dotprod_ov] false bytes_bit_mul_block_spec (w4_unint_z3 ["bytes_bit_dotprod"]);
  syndrome_bytewise_ov <- llvm_verify linked_mod "syndrome_bytewise" [bytes_bit_mul_block_ov] false syndrome_bytewise_spec (w4_unint_z3 ["bytes_bit_mul_block"]);
  syndrome_loop_ov <- llvm_verify linked_mod "syndrome_loop" [b_func_ov] false syndrome_loop_spec (w4_unint_z3 ["b_func"]);
  //syndrome_outer_ov <- llvm_verify linked_mod "syndrome_outer" [syndrome_loop_ov] false syndrome_spec (w4_unint_z3 ["syndrome_loop"]);
  

  /*
  synd_byte_einv_ov <- llvm_verify linked_mod "synd_byte_einv" [eval_ov, gf_mul_ov, gf_inv_ov] false synd_byte_einv_spec (w4_unint_z3 ["eval", "gf_mul", "gf_inv"]);
  selector_ov <- llvm_verify linked_mod "selector" [] false selector_spec (w4_unint_z3 []);
  synd_byte_seleinv_ov <- llvm_verify linked_mod "synd_byte_seleinv" [selector_ov, synd_byte_einv_ov] false synd_byte_seleinv_spec (w4_unint_z3 ["synd_byte_einv", "selector"]);

  
  synd_bytewise_init_ov <- llvm_verify linked_mod "synd_bytewise_init" [synd_byte_seleinv_ov] false synd_bytewise_init_spec (w4_unint_z3 ["synd_byte_seleinv"]);
  synd_bytewise_next_ov <- llvm_verify linked_mod "synd_bytewise_next" [gf_mul_ov] false synd_bytewise_next_spec (w4_unint_z3 ["gf_mul"]);
  synd_bytewise_sum_ov <- llvm_verify linked_mod "synd_bytewise_sum" [gf_add_ov] false synd_bytewise_sum_spec (w4_unint_z3 ["gf_add"]);
  //synd_bytewise_alt_ov <- llvm_verify linked_mod "synd_bytewise_alt" [synd_bytewise_sum_ov, synd_bytewise_next_ov, synd_bytewise_init_ov] false synd_bytewise_alt_spec (w4_unint_z3 ["synd_bytewise_sum", "synd_bytewise_next", "synd_bytewise_init"]);
  

  zadd_ov <- llvm_verify linked_mod "zadd" [gf_add_ov] false zadd_spec (w4_unint_z3 ["gf_add"]);
  synd_byte_add_ov <- llvm_verify linked_mod "synd_byte_add" [zadd_ov] false synd_byte_add_spec (w4_unint_z3 ["zadd"]);

  synd_byte_addvals_ov <- llvm_verify linked_mod "synd_byte_addvals" [gf_mul_ov] false synd_byte_addvals_spec (w4_unint_z3 ["gf_mul"]);

  synd_bytewise_byt_ov <- llvm_verify linked_mod "synd_bytewise_byt" [synd_byte_seleinv_ov, synd_byte_addvals_ov, synd_byte_add_ov] false synd_bytewise_byt_spec (w4_unint_z3 ["synd_byte_seleinv", "synd_byte_addvals", "synd_byte_add"]);
  //synd_bytewise_ov <- llvm_verify linked_mod "synd_bytewise" [synd_bytewise_byt_ov] false synd_bytewise_spec (w4_unint_z3 ["synd_bytewise_byt"]);
  */
  print("Done!");
};


