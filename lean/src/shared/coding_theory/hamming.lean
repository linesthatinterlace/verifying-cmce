import topology.metric_space.basic
import analysis.normed.group.basic

namespace fintype
open subtype

variables {Œ± : Type*} (p q : Œ± ‚Üí Prop)
[fintype {x // p x}] [fintype {x // q x}] [fintype {x // p x ‚à® q x}] [fintype {x // p x ‚àß q x}]

-- PR THIS

theorem card_subtype_le_of_imp (h : p ‚â§ q) : card {x // p x} ‚â§ card {x // q x} := card_le_of_embedding (imp_embedding _ _ h)

end fintype

open fintype

def ham {Œπ : Type*} [fintype Œπ] (Œ≤ : Œπ ‚Üí Type*) [Œ† i, decidable_eq (Œ≤ i)] : Type* := Œ† i, Œ≤ i

local notation `ùìó[` K`,` n`]` := ham (Œª _ : fin n, K)

namespace hamming

variables {Œ± Œπ : Type*} [semiring Œ±] [fintype Œπ] {Œ≤ : Œπ ‚Üí Type*} [Œ† i, decidable_eq (Œ≤ i)] 
@[pattern] def of_ham : ham Œ≤ ‚âÉ Œ† i, Œ≤ i := equiv.refl _
@[pattern] def to_ham : (Œ† i, Œ≤ i) ‚âÉ ham Œ≤ := equiv.refl _

@[simp] lemma to_ham_symm_eq : (@to_ham _ _ Œ≤ _).symm = of_ham := rfl
@[simp] lemma of_ham_symm_eq : (@of_ham _ _ Œ≤ _).symm = to_ham := rfl
@[simp] lemma to_ham_of_ham (x : ham Œ≤) : to_ham (of_ham x) = x := rfl
@[simp] lemma of_ham_to_ham (x : Œ† i, Œ≤ i) : of_ham (to_ham x) = x := rfl
@[simp] lemma to_ham_inj {x y : Œ† i, Œ≤ i} : to_ham x = to_ham y ‚Üî x = y := iff.rfl
@[simp] lemma of_ham_inj {x y : ham Œ≤} : of_ham x = of_ham y ‚Üî x = y := iff.rfl

instance [Œ† i, has_zero (Œ≤ i)] : has_zero (ham Œ≤) := pi.has_zero
instance [Œ† i, has_add (Œ≤ i)] : has_add (ham Œ≤) := pi.has_add
instance [Œ† i, has_sub (Œ≤ i)] : has_sub (ham Œ≤) := pi.has_sub
instance [Œ† i, has_mul (Œ≤ i)] : has_mul (ham Œ≤) := pi.has_mul
instance [Œ† i, has_div (Œ≤ i)] : has_div (ham Œ≤) := pi.has_div
instance [Œ† i, add_group (Œ≤ i)] : add_group (ham Œ≤) := pi.add_group
instance [Œ† i, add_comm_group (Œ≤ i)] : add_comm_group (ham Œ≤) := pi.add_comm_group
instance [Œ† i, add_comm_monoid (Œ≤ i)] : add_comm_monoid (ham Œ≤) := pi.add_comm_monoid

instance [Œ† i, add_comm_monoid (Œ≤ i)] [Œ† i, module Œ± (Œ≤ i)] : module Œ± (ham Œ≤) := pi.module _ _ _

def ham_dist (x y : ham Œ≤) := card {i // x i ‚â† y i}

instance : has_dist (ham Œ≤) := ‚ü®Œª x y, ham_dist x y‚ü©

@[simp, push_cast] lemma dist_eq_ham_dist (x y : ham Œ≤) : dist x y = ham_dist x y := rfl

lemma ham_dist_eq (x y : ham Œ≤) : ham_dist x y = card {i // x i ‚â† y i} := rfl

@[simp] lemma ham_dist_self (x : ham Œ≤) : ham_dist x x = 0 := 
by simp [ham_dist_eq, card_eq_zero_iff]; apply_instance

lemma ham_dist_comm (x y : ham Œ≤) : ham_dist x y = ham_dist y x := 
by simp_rw [ham_dist_eq, ne_comm]

lemma ham_dist_triangle (x y z : ham Œ≤) : ham_dist x z ‚â§ ham_dist x y + ham_dist y z :=
begin
  simp_rw ham_dist_eq, refine le_trans (card_subtype_le_of_imp _ _ (Œª _ h, _))
  (card_subtype_or _ _), contrapose! h, exact h.1.symm ‚ñ∏ h.2
end

lemma eq_of_ham_dist_eq_zero (x y : ham Œ≤) (h : ham_dist x y = 0) : x = y :=
begin
  contrapose h, rw [‚Üêne.def, function.ne_iff] at h, rcases h with ‚ü®i, hi‚ü©,
  rw [ham_dist_eq, card_eq_zero_iff], exact Œª H, H.elim' ‚ü®i, hi‚ü©
end

lemma ham_dist_eq_zero (x y : ham Œ≤) : ham_dist x y = 0 ‚Üî x = y :=
‚ü®eq_of_ham_dist_eq_zero x y, Œª h, h ‚ñ∏ ham_dist_self _‚ü©

lemma ham_dist_pos (x y : ham Œ≤) : 0 < ham_dist x y ‚Üî x ‚â† y :=
by rw [ne.def, ‚Üê ham_dist_eq_zero, decidable.iff_not_comm, not_lt, le_zero_iff]
 
instance : metric_space (ham Œ≤) := 
{ dist_self           := by push_cast; exact_mod_cast ham_dist_self,
  dist_comm           := by push_cast; exact_mod_cast ham_dist_comm,
  dist_triangle       := by push_cast; exact_mod_cast ham_dist_triangle,
  eq_of_dist_eq_zero  := by push_cast; exact_mod_cast eq_of_ham_dist_eq_zero }

section has_zero

variables [Œ† i, has_zero (Œ≤ i)]

def ham_weight (x : ham Œ≤) : ‚Ñï := ham_dist x 0

instance : has_norm (ham Œ≤) := ‚ü®Œª x, ham_weight x‚ü©

@[simp, push_cast] lemma norm_eq_ham_weight (x : ham Œ≤) : ‚à•x‚à• = ham_weight x := rfl

lemma ham_weight_eq (x : ham Œ≤) : ham_weight x = card {i // x i ‚â† 0} := rfl

@[simp] lemma ham_weight_zero_eq_zero : ham_weight (0 : ham Œ≤) = 0 := 
ham_dist_self _

lemma zero_of_ham_weight_eq_zero (x : ham Œ≤) (h : ham_weight x = 0) : x = 0 := 
eq_of_ham_dist_eq_zero _ _ h

lemma ham_weight_eq_zero_iff_zero (x : ham Œ≤) : ham_weight x = 0 ‚Üî x = 0 := 
ham_dist_eq_zero _ _

lemma ham_weight_pos_iff_neq (x : ham Œ≤) : 0 < ham_weight x ‚Üî x ‚â† 0 := 
ham_dist_pos _ _

end has_zero

lemma ham_dist_eq_ham_weight_sub [Œ† i, add_group (Œ≤ i)] (x y : ham Œ≤) : 
ham_dist x y = ham_weight (x - y) :=
by simp_rw [ham_dist_eq, ham_weight_eq, pi.sub_apply, sub_ne_zero]

instance [Œ† i, add_comm_group (Œ≤ i)] : normed_group (ham Œ≤) := 
{ dist_eq := by push_cast; exact_mod_cast ham_dist_eq_ham_weight_sub }

end hamming